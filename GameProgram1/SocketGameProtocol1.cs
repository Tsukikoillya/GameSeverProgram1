// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SocketGameProtocol1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SocketGameProtocol1 {

  /// <summary>Holder for reflection information generated from SocketGameProtocol1.proto</summary>
  public static partial class SocketGameProtocol1Reflection {

    #region Descriptor
    /// <summary>File descriptor for SocketGameProtocol1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SocketGameProtocol1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlTb2NrZXRHYW1lUHJvdG9jb2wxLnByb3RvEhNTb2NrZXRHYW1lUHJvdG9j",
            "b2wxIogECghNYWluUGFjaxI1CgtyZXF1ZXN0Y29kZRgBIAEoDjIgLlNvY2tl",
            "dEdhbWVQcm90b2NvbDEuUmVxdWVzdENvZGUSMwoKYWN0aW9uY29kZRgCIAEo",
            "DjIfLlNvY2tldEdhbWVQcm90b2NvbDEuQWN0aW9uQ29kZRIzCgpyZXR1cm5j",
            "b2RlGAMgASgOMh8uU29ja2V0R2FtZVByb3RvY29sMS5SZXR1cm5Db2RlEjEK",
            "CWxvZ2lucGFjaxgEIAEoCzIeLlNvY2tldEdhbWVQcm90b2NvbDEuTG9naW5Q",
            "YWNrEjkKDWNoYXJhY3RlcmRhdGEYBSADKAsyIi5Tb2NrZXRHYW1lUHJvdG9j",
            "b2wxLkNoYXJhY3RlckRhdGESLwoIaXRlbWRhdGEYBiADKAsyHS5Tb2NrZXRH",
            "YW1lUHJvdG9jb2wxLkl0ZW1EYXRhEjMKCmZyaWVuZGRhdGEYByADKAsyHy5T",
            "b2NrZXRHYW1lUHJvdG9jb2wxLkZyaWVuZERhdGESMwoKZnJpZW5kY29kZRgI",
            "IAEoDjIfLlNvY2tldEdhbWVQcm90b2NvbDEuRnJpZW5kQ29kZRIVCg1yZXR1",
            "cm5tZXNzYWdlGAkgASgJEjsKDmNoZWNrcG9pbnRkYXRhGAogAygLMiMuU29j",
            "a2V0R2FtZVByb3RvY29sMS5DaGVja3BvaW50RGF0YSKfAQoJTG9naW5QYWNr",
            "EhAKCHVzZXJuYW1lGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJEg0KBWVtYWls",
            "GAMgASgJEgwKBGNvZGUYBCABKAkSEAoIZnJpZW5kaWQYBSABKAkSCwoDdWlk",
            "GAYgASgJEhAKCGRpYW1vbmRzGAcgASgJEg8KB2NhcmRudW0YCCABKAkSDwoH",
            "bWF4Y3BpZBgJIAEoCSLTAQoNQ2hhcmFjdGVyRGF0YRILCgNDSUQYASABKAUS",
            "DQoFbGV2ZWwYAiABKAUSCwoDZXhwGAMgASgFEgwKBGNvc3QYBCABKAUSDAoE",
            "bGlmZRgFIAEoAhIMCgRuYW1lGAYgASgJEgwKBHR5cGUYByABKAUSEgoKYXR0",
            "YWNrX3BvdxgIIAEoBRIOCgZkZWZlbmQYCSABKAUSEwoLYXR0YWNrX2FyZWEY",
            "CiABKAISFwoPYXR0YWNrX2ludGVydmFsGAsgASgCEg8KB3JvbGVFeHAYDCAB",
            "KAUiYQoISXRlbURhdGESCwoDSUlEGAEgASgFEgwKBHR5cGUYAiABKAUSDQoF",
            "dmFsdWUYAyABKAUSDgoGZGV0YWlsGAQgASgJEg0KBWNvdW50GAUgASgFEgwK",
            "BG5hbWUYBiABKAkiKwoKRnJpZW5kRGF0YRIQCghraWNrbmFtZRgBIAEoCRIL",
            "CgNVSUQYAiABKAkiXgoOQ2hlY2twb2ludERhdGESCgoCaWQYASABKAUSDAoE",
            "bmFtZRgCIAEoCRIyCgVzdGF0ZRgDIAEoDjIjLlNvY2tldEdhbWVQcm90b2Nv",
            "bDEuQ2hlY2twb2ludENvZGUqXAoLUmVxdWVzdENvZGUSDwoLUmVxdWVzdE5v",
            "bmUQABIICgRVc2VyEAESDAoIQmFja3BhY2sQAhIICgRJdGVtEAMSCgoGRnJp",
            "ZW5kEAQSDgoKQ2hlY2twb2ludBAFKu0BCgpBY3Rpb25Db2RlEg4KCkFjdGlv",
            "bk5vbmUQABIICgRDb2RlEAESCQoFTG9nb24QAhIJCgVMb2dpbhADEhIKDkNo",
            "YW5nZVBhc3N3b3JkEAQSFAoQR2V0Q2hhcmFjdGVyRGF0YRAFEg8KC0dldEl0",
            "ZW1EYXRhEAYSEQoNR2V0RnJpZW5kRGF0YRAHEhEKDVNldEZyaWVuZHNoaXAQ",
            "CBILCgdHZXRDYXJkEAkSFQoRR2V0Q2hlY2twb2ludExpc3QQChIWChJHZXRD",
            "cENoYXJhY3RlckRhdGEQCxISCg5TZXRVc2VyTWF4Q3BJZBAMKjMKClJldHVy",
            "bkNvZGUSDgoKUmV0dXJuTm9uZRAAEgsKB1N1Y2NlZWQQARIICgRGYWlsEAIq",
            "SAoOQ2hlY2twb2ludENvZGUSEgoOQ2hlY2twb2ludE5vbmUQABIICgRQYXNz",
            "EAESDgoKVW5sb2NrRmFpbBACEggKBExvY2sQAypQCgpGcmllbmRDb2RlEg4K",
            "CkZyaWVuZE5vbmUQABIMCghNeUZyaWVuZBABEhUKEUZyaWVuZEFwcGxpY2F0",
            "aW9uEAISDQoJQWRkRnJpZW5kEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SocketGameProtocol1.RequestCode), typeof(global::SocketGameProtocol1.ActionCode), typeof(global::SocketGameProtocol1.ReturnCode), typeof(global::SocketGameProtocol1.CheckpointCode), typeof(global::SocketGameProtocol1.FriendCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol1.MainPack), global::SocketGameProtocol1.MainPack.Parser, new[]{ "Requestcode", "Actioncode", "Returncode", "Loginpack", "Characterdata", "Itemdata", "Frienddata", "Friendcode", "Returnmessage", "Checkpointdata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol1.LoginPack), global::SocketGameProtocol1.LoginPack.Parser, new[]{ "Username", "Password", "Email", "Code", "Friendid", "Uid", "Diamonds", "Cardnum", "Maxcpid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol1.CharacterData), global::SocketGameProtocol1.CharacterData.Parser, new[]{ "CID", "Level", "Exp", "Cost", "Life", "Name", "Type", "AttackPow", "Defend", "AttackArea", "AttackInterval", "RoleExp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol1.ItemData), global::SocketGameProtocol1.ItemData.Parser, new[]{ "IID", "Type", "Value", "Detail", "Count", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol1.FriendData), global::SocketGameProtocol1.FriendData.Parser, new[]{ "Kickname", "UID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol1.CheckpointData), global::SocketGameProtocol1.CheckpointData.Parser, new[]{ "Id", "Name", "State" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    /// <summary>
    ///用户
    /// </summary>
    [pbr::OriginalName("User")] User = 1,
    /// <summary>
    ///背包
    /// </summary>
    [pbr::OriginalName("Backpack")] Backpack = 2,
    /// <summary>
    ///道具
    /// </summary>
    [pbr::OriginalName("Item")] Item = 3,
    /// <summary>
    ///朋友
    /// </summary>
    [pbr::OriginalName("Friend")] Friend = 4,
    /// <summary>
    ///关卡
    /// </summary>
    [pbr::OriginalName("Checkpoint")] Checkpoint = 5,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    ///注册验证码
    /// </summary>
    [pbr::OriginalName("Code")] Code = 1,
    /// <summary>
    ///注册
    /// </summary>
    [pbr::OriginalName("Logon")] Logon = 2,
    /// <summary>
    ///登入
    /// </summary>
    [pbr::OriginalName("Login")] Login = 3,
    /// <summary>
    ///修改密码
    /// </summary>
    [pbr::OriginalName("ChangePassword")] ChangePassword = 4,
    /// <summary>
    ///获取角色资料
    /// </summary>
    [pbr::OriginalName("GetCharacterData")] GetCharacterData = 5,
    /// <summary>
    ///获取道具资料
    /// </summary>
    [pbr::OriginalName("GetItemData")] GetItemData = 6,
    /// <summary>
    ///获取我的好友表，根据用户email
    /// </summary>
    [pbr::OriginalName("GetFriendData")] GetFriendData = 7,
    /// <summary>
    ///修改好友关系
    /// </summary>
    [pbr::OriginalName("SetFriendship")] SetFriendship = 8,
    /// <summary>
    ///抽卡池
    /// </summary>
    [pbr::OriginalName("GetCard")] GetCard = 9,
    /// <summary>
    ///获取关卡表
    /// </summary>
    [pbr::OriginalName("GetCheckpointList")] GetCheckpointList = 10,
    /// <summary>
    ///获取关卡角色表
    /// </summary>
    [pbr::OriginalName("GetCpCharacterData")] GetCpCharacterData = 11,
    /// <summary>
    ///设置user的max关卡id
    /// </summary>
    [pbr::OriginalName("SetUserMaxCpId")] SetUserMaxCpId = 12,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("Succeed")] Succeed = 1,
    /// <summary>
    ///失败
    /// </summary>
    [pbr::OriginalName("Fail")] Fail = 2,
  }

  public enum CheckpointCode {
    [pbr::OriginalName("CheckpointNone")] CheckpointNone = 0,
    /// <summary>
    ///已经通过
    /// </summary>
    [pbr::OriginalName("Pass")] Pass = 1,
    /// <summary>
    ///解锁了但失败了
    /// </summary>
    [pbr::OriginalName("UnlockFail")] UnlockFail = 2,
    /// <summary>
    ///未解锁
    /// </summary>
    [pbr::OriginalName("Lock")] Lock = 3,
  }

  public enum FriendCode {
    [pbr::OriginalName("FriendNone")] FriendNone = 0,
    [pbr::OriginalName("MyFriend")] MyFriend = 1,
    [pbr::OriginalName("FriendApplication")] FriendApplication = 2,
    [pbr::OriginalName("AddFriend")] AddFriend = 3,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol1.SocketGameProtocol1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestcode_ = other.requestcode_;
      actioncode_ = other.actioncode_;
      returncode_ = other.returncode_;
      loginpack_ = other.loginpack_ != null ? other.loginpack_.Clone() : null;
      characterdata_ = other.characterdata_.Clone();
      itemdata_ = other.itemdata_.Clone();
      frienddata_ = other.frienddata_.Clone();
      friendcode_ = other.friendcode_;
      returnmessage_ = other.returnmessage_;
      checkpointdata_ = other.checkpointdata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "requestcode" field.</summary>
    public const int RequestcodeFieldNumber = 1;
    private global::SocketGameProtocol1.RequestCode requestcode_ = global::SocketGameProtocol1.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol1.RequestCode Requestcode {
      get { return requestcode_; }
      set {
        requestcode_ = value;
      }
    }

    /// <summary>Field number for the "actioncode" field.</summary>
    public const int ActioncodeFieldNumber = 2;
    private global::SocketGameProtocol1.ActionCode actioncode_ = global::SocketGameProtocol1.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol1.ActionCode Actioncode {
      get { return actioncode_; }
      set {
        actioncode_ = value;
      }
    }

    /// <summary>Field number for the "returncode" field.</summary>
    public const int ReturncodeFieldNumber = 3;
    private global::SocketGameProtocol1.ReturnCode returncode_ = global::SocketGameProtocol1.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol1.ReturnCode Returncode {
      get { return returncode_; }
      set {
        returncode_ = value;
      }
    }

    /// <summary>Field number for the "loginpack" field.</summary>
    public const int LoginpackFieldNumber = 4;
    private global::SocketGameProtocol1.LoginPack loginpack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol1.LoginPack Loginpack {
      get { return loginpack_; }
      set {
        loginpack_ = value;
      }
    }

    /// <summary>Field number for the "characterdata" field.</summary>
    public const int CharacterdataFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SocketGameProtocol1.CharacterData> _repeated_characterdata_codec
        = pb::FieldCodec.ForMessage(42, global::SocketGameProtocol1.CharacterData.Parser);
    private readonly pbc::RepeatedField<global::SocketGameProtocol1.CharacterData> characterdata_ = new pbc::RepeatedField<global::SocketGameProtocol1.CharacterData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketGameProtocol1.CharacterData> Characterdata {
      get { return characterdata_; }
    }

    /// <summary>Field number for the "itemdata" field.</summary>
    public const int ItemdataFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SocketGameProtocol1.ItemData> _repeated_itemdata_codec
        = pb::FieldCodec.ForMessage(50, global::SocketGameProtocol1.ItemData.Parser);
    private readonly pbc::RepeatedField<global::SocketGameProtocol1.ItemData> itemdata_ = new pbc::RepeatedField<global::SocketGameProtocol1.ItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketGameProtocol1.ItemData> Itemdata {
      get { return itemdata_; }
    }

    /// <summary>Field number for the "frienddata" field.</summary>
    public const int FrienddataFieldNumber = 7;
    private static readonly pb::FieldCodec<global::SocketGameProtocol1.FriendData> _repeated_frienddata_codec
        = pb::FieldCodec.ForMessage(58, global::SocketGameProtocol1.FriendData.Parser);
    private readonly pbc::RepeatedField<global::SocketGameProtocol1.FriendData> frienddata_ = new pbc::RepeatedField<global::SocketGameProtocol1.FriendData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketGameProtocol1.FriendData> Frienddata {
      get { return frienddata_; }
    }

    /// <summary>Field number for the "friendcode" field.</summary>
    public const int FriendcodeFieldNumber = 8;
    private global::SocketGameProtocol1.FriendCode friendcode_ = global::SocketGameProtocol1.FriendCode.FriendNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol1.FriendCode Friendcode {
      get { return friendcode_; }
      set {
        friendcode_ = value;
      }
    }

    /// <summary>Field number for the "returnmessage" field.</summary>
    public const int ReturnmessageFieldNumber = 9;
    private string returnmessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Returnmessage {
      get { return returnmessage_; }
      set {
        returnmessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checkpointdata" field.</summary>
    public const int CheckpointdataFieldNumber = 10;
    private static readonly pb::FieldCodec<global::SocketGameProtocol1.CheckpointData> _repeated_checkpointdata_codec
        = pb::FieldCodec.ForMessage(82, global::SocketGameProtocol1.CheckpointData.Parser);
    private readonly pbc::RepeatedField<global::SocketGameProtocol1.CheckpointData> checkpointdata_ = new pbc::RepeatedField<global::SocketGameProtocol1.CheckpointData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketGameProtocol1.CheckpointData> Checkpointdata {
      get { return checkpointdata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requestcode != other.Requestcode) return false;
      if (Actioncode != other.Actioncode) return false;
      if (Returncode != other.Returncode) return false;
      if (!object.Equals(Loginpack, other.Loginpack)) return false;
      if(!characterdata_.Equals(other.characterdata_)) return false;
      if(!itemdata_.Equals(other.itemdata_)) return false;
      if(!frienddata_.Equals(other.frienddata_)) return false;
      if (Friendcode != other.Friendcode) return false;
      if (Returnmessage != other.Returnmessage) return false;
      if(!checkpointdata_.Equals(other.checkpointdata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requestcode != global::SocketGameProtocol1.RequestCode.RequestNone) hash ^= Requestcode.GetHashCode();
      if (Actioncode != global::SocketGameProtocol1.ActionCode.ActionNone) hash ^= Actioncode.GetHashCode();
      if (Returncode != global::SocketGameProtocol1.ReturnCode.ReturnNone) hash ^= Returncode.GetHashCode();
      if (loginpack_ != null) hash ^= Loginpack.GetHashCode();
      hash ^= characterdata_.GetHashCode();
      hash ^= itemdata_.GetHashCode();
      hash ^= frienddata_.GetHashCode();
      if (Friendcode != global::SocketGameProtocol1.FriendCode.FriendNone) hash ^= Friendcode.GetHashCode();
      if (Returnmessage.Length != 0) hash ^= Returnmessage.GetHashCode();
      hash ^= checkpointdata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requestcode != global::SocketGameProtocol1.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Requestcode);
      }
      if (Actioncode != global::SocketGameProtocol1.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Actioncode);
      }
      if (Returncode != global::SocketGameProtocol1.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Returncode);
      }
      if (loginpack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Loginpack);
      }
      characterdata_.WriteTo(output, _repeated_characterdata_codec);
      itemdata_.WriteTo(output, _repeated_itemdata_codec);
      frienddata_.WriteTo(output, _repeated_frienddata_codec);
      if (Friendcode != global::SocketGameProtocol1.FriendCode.FriendNone) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Friendcode);
      }
      if (Returnmessage.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Returnmessage);
      }
      checkpointdata_.WriteTo(output, _repeated_checkpointdata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requestcode != global::SocketGameProtocol1.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Requestcode);
      }
      if (Actioncode != global::SocketGameProtocol1.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Actioncode);
      }
      if (Returncode != global::SocketGameProtocol1.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Returncode);
      }
      if (loginpack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loginpack);
      }
      size += characterdata_.CalculateSize(_repeated_characterdata_codec);
      size += itemdata_.CalculateSize(_repeated_itemdata_codec);
      size += frienddata_.CalculateSize(_repeated_frienddata_codec);
      if (Friendcode != global::SocketGameProtocol1.FriendCode.FriendNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Friendcode);
      }
      if (Returnmessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Returnmessage);
      }
      size += checkpointdata_.CalculateSize(_repeated_checkpointdata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.Requestcode != global::SocketGameProtocol1.RequestCode.RequestNone) {
        Requestcode = other.Requestcode;
      }
      if (other.Actioncode != global::SocketGameProtocol1.ActionCode.ActionNone) {
        Actioncode = other.Actioncode;
      }
      if (other.Returncode != global::SocketGameProtocol1.ReturnCode.ReturnNone) {
        Returncode = other.Returncode;
      }
      if (other.loginpack_ != null) {
        if (loginpack_ == null) {
          Loginpack = new global::SocketGameProtocol1.LoginPack();
        }
        Loginpack.MergeFrom(other.Loginpack);
      }
      characterdata_.Add(other.characterdata_);
      itemdata_.Add(other.itemdata_);
      frienddata_.Add(other.frienddata_);
      if (other.Friendcode != global::SocketGameProtocol1.FriendCode.FriendNone) {
        Friendcode = other.Friendcode;
      }
      if (other.Returnmessage.Length != 0) {
        Returnmessage = other.Returnmessage;
      }
      checkpointdata_.Add(other.checkpointdata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Requestcode = (global::SocketGameProtocol1.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            Actioncode = (global::SocketGameProtocol1.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            Returncode = (global::SocketGameProtocol1.ReturnCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (loginpack_ == null) {
              Loginpack = new global::SocketGameProtocol1.LoginPack();
            }
            input.ReadMessage(Loginpack);
            break;
          }
          case 42: {
            characterdata_.AddEntriesFrom(input, _repeated_characterdata_codec);
            break;
          }
          case 50: {
            itemdata_.AddEntriesFrom(input, _repeated_itemdata_codec);
            break;
          }
          case 58: {
            frienddata_.AddEntriesFrom(input, _repeated_frienddata_codec);
            break;
          }
          case 64: {
            Friendcode = (global::SocketGameProtocol1.FriendCode) input.ReadEnum();
            break;
          }
          case 74: {
            Returnmessage = input.ReadString();
            break;
          }
          case 82: {
            checkpointdata_.AddEntriesFrom(input, _repeated_checkpointdata_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol1.SocketGameProtocol1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      email_ = other.email_;
      code_ = other.code_;
      friendid_ = other.friendid_;
      uid_ = other.uid_;
      diamonds_ = other.diamonds_;
      cardnum_ = other.cardnum_;
      maxcpid_ = other.maxcpid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    /// <summary>
    ///邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private string code_ = "";
    /// <summary>
    ///验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friendid" field.</summary>
    public const int FriendidFieldNumber = 5;
    private string friendid_ = "";
    /// <summary>
    ///好友id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Friendid {
      get { return friendid_; }
      set {
        friendid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 6;
    private string uid_ = "";
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "diamonds" field.</summary>
    public const int DiamondsFieldNumber = 7;
    private string diamonds_ = "";
    /// <summary>
    ///用户钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Diamonds {
      get { return diamonds_; }
      set {
        diamonds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cardnum" field.</summary>
    public const int CardnumFieldNumber = 8;
    private string cardnum_ = "";
    /// <summary>
    ///用来记录抽卡数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cardnum {
      get { return cardnum_; }
      set {
        cardnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxcpid" field.</summary>
    public const int MaxcpidFieldNumber = 9;
    private string maxcpid_ = "";
    /// <summary>
    ///最大关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Maxcpid {
      get { return maxcpid_; }
      set {
        maxcpid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (Email != other.Email) return false;
      if (Code != other.Code) return false;
      if (Friendid != other.Friendid) return false;
      if (Uid != other.Uid) return false;
      if (Diamonds != other.Diamonds) return false;
      if (Cardnum != other.Cardnum) return false;
      if (Maxcpid != other.Maxcpid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Friendid.Length != 0) hash ^= Friendid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Diamonds.Length != 0) hash ^= Diamonds.GetHashCode();
      if (Cardnum.Length != 0) hash ^= Cardnum.GetHashCode();
      if (Maxcpid.Length != 0) hash ^= Maxcpid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Code);
      }
      if (Friendid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Friendid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Uid);
      }
      if (Diamonds.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Diamonds);
      }
      if (Cardnum.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cardnum);
      }
      if (Maxcpid.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Maxcpid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Friendid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Friendid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Diamonds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Diamonds);
      }
      if (Cardnum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cardnum);
      }
      if (Maxcpid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Maxcpid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Friendid.Length != 0) {
        Friendid = other.Friendid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Diamonds.Length != 0) {
        Diamonds = other.Diamonds;
      }
      if (other.Cardnum.Length != 0) {
        Cardnum = other.Cardnum;
      }
      if (other.Maxcpid.Length != 0) {
        Maxcpid = other.Maxcpid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            Code = input.ReadString();
            break;
          }
          case 42: {
            Friendid = input.ReadString();
            break;
          }
          case 50: {
            Uid = input.ReadString();
            break;
          }
          case 58: {
            Diamonds = input.ReadString();
            break;
          }
          case 66: {
            Cardnum = input.ReadString();
            break;
          }
          case 74: {
            Maxcpid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterData : pb::IMessage<CharacterData> {
    private static readonly pb::MessageParser<CharacterData> _parser = new pb::MessageParser<CharacterData>(() => new CharacterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol1.SocketGameProtocol1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterData(CharacterData other) : this() {
      cID_ = other.cID_;
      level_ = other.level_;
      exp_ = other.exp_;
      cost_ = other.cost_;
      life_ = other.life_;
      name_ = other.name_;
      type_ = other.type_;
      attackPow_ = other.attackPow_;
      defend_ = other.defend_;
      attackArea_ = other.attackArea_;
      attackInterval_ = other.attackInterval_;
      roleExp_ = other.roleExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterData Clone() {
      return new CharacterData(this);
    }

    /// <summary>Field number for the "CID" field.</summary>
    public const int CIDFieldNumber = 1;
    private int cID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CID {
      get { return cID_; }
      set {
        cID_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 4;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "life" field.</summary>
    public const int LifeFieldNumber = 5;
    private float life_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "attack_pow" field.</summary>
    public const int AttackPowFieldNumber = 8;
    private int attackPow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackPow {
      get { return attackPow_; }
      set {
        attackPow_ = value;
      }
    }

    /// <summary>Field number for the "defend" field.</summary>
    public const int DefendFieldNumber = 9;
    private int defend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defend {
      get { return defend_; }
      set {
        defend_ = value;
      }
    }

    /// <summary>Field number for the "attack_area" field.</summary>
    public const int AttackAreaFieldNumber = 10;
    private float attackArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackArea {
      get { return attackArea_; }
      set {
        attackArea_ = value;
      }
    }

    /// <summary>Field number for the "attack_interval" field.</summary>
    public const int AttackIntervalFieldNumber = 11;
    private float attackInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackInterval {
      get { return attackInterval_; }
      set {
        attackInterval_ = value;
      }
    }

    /// <summary>Field number for the "roleExp" field.</summary>
    public const int RoleExpFieldNumber = 12;
    private int roleExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleExp {
      get { return roleExp_; }
      set {
        roleExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CID != other.CID) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Cost != other.Cost) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Life, other.Life)) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (AttackPow != other.AttackPow) return false;
      if (Defend != other.Defend) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackArea, other.AttackArea)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackInterval, other.AttackInterval)) return false;
      if (RoleExp != other.RoleExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CID != 0) hash ^= CID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (Life != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Life);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (AttackPow != 0) hash ^= AttackPow.GetHashCode();
      if (Defend != 0) hash ^= Defend.GetHashCode();
      if (AttackArea != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackArea);
      if (AttackInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackInterval);
      if (RoleExp != 0) hash ^= RoleExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
      if (Cost != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cost);
      }
      if (Life != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Life);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Type);
      }
      if (AttackPow != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AttackPow);
      }
      if (Defend != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Defend);
      }
      if (AttackArea != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(AttackArea);
      }
      if (AttackInterval != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AttackInterval);
      }
      if (RoleExp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RoleExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (Life != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (AttackPow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackPow);
      }
      if (Defend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defend);
      }
      if (AttackArea != 0F) {
        size += 1 + 4;
      }
      if (AttackInterval != 0F) {
        size += 1 + 4;
      }
      if (RoleExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterData other) {
      if (other == null) {
        return;
      }
      if (other.CID != 0) {
        CID = other.CID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.Life != 0F) {
        Life = other.Life;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.AttackPow != 0) {
        AttackPow = other.AttackPow;
      }
      if (other.Defend != 0) {
        Defend = other.Defend;
      }
      if (other.AttackArea != 0F) {
        AttackArea = other.AttackArea;
      }
      if (other.AttackInterval != 0F) {
        AttackInterval = other.AttackInterval;
      }
      if (other.RoleExp != 0) {
        RoleExp = other.RoleExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
          case 32: {
            Cost = input.ReadInt32();
            break;
          }
          case 45: {
            Life = input.ReadFloat();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 56: {
            Type = input.ReadInt32();
            break;
          }
          case 64: {
            AttackPow = input.ReadInt32();
            break;
          }
          case 72: {
            Defend = input.ReadInt32();
            break;
          }
          case 85: {
            AttackArea = input.ReadFloat();
            break;
          }
          case 93: {
            AttackInterval = input.ReadFloat();
            break;
          }
          case 96: {
            RoleExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemData : pb::IMessage<ItemData> {
    private static readonly pb::MessageParser<ItemData> _parser = new pb::MessageParser<ItemData>(() => new ItemData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol1.SocketGameProtocol1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData(ItemData other) : this() {
      iID_ = other.iID_;
      type_ = other.type_;
      value_ = other.value_;
      detail_ = other.detail_;
      count_ = other.count_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData Clone() {
      return new ItemData(this);
    }

    /// <summary>Field number for the "IID" field.</summary>
    public const int IIDFieldNumber = 1;
    private int iID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IID {
      get { return iID_; }
      set {
        iID_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 4;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IID != other.IID) return false;
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (Detail != other.Detail) return false;
      if (Count != other.Count) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IID != 0) hash ^= IID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Detail);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemData other) {
      if (other == null) {
        return;
      }
      if (other.IID != 0) {
        IID = other.IID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IID = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
          case 34: {
            Detail = input.ReadString();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FriendData : pb::IMessage<FriendData> {
    private static readonly pb::MessageParser<FriendData> _parser = new pb::MessageParser<FriendData>(() => new FriendData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol1.SocketGameProtocol1Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendData(FriendData other) : this() {
      kickname_ = other.kickname_;
      uID_ = other.uID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendData Clone() {
      return new FriendData(this);
    }

    /// <summary>Field number for the "kickname" field.</summary>
    public const int KicknameFieldNumber = 1;
    private string kickname_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kickname {
      get { return kickname_; }
      set {
        kickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 2;
    private string uID_ = "";
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kickname != other.Kickname) return false;
      if (UID != other.UID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kickname.Length != 0) hash ^= Kickname.GetHashCode();
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Kickname);
      }
      if (UID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kickname);
      }
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendData other) {
      if (other == null) {
        return;
      }
      if (other.Kickname.Length != 0) {
        Kickname = other.Kickname;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kickname = input.ReadString();
            break;
          }
          case 18: {
            UID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckpointData : pb::IMessage<CheckpointData> {
    private static readonly pb::MessageParser<CheckpointData> _parser = new pb::MessageParser<CheckpointData>(() => new CheckpointData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckpointData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol1.SocketGameProtocol1Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckpointData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckpointData(CheckpointData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckpointData Clone() {
      return new CheckpointData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::SocketGameProtocol1.CheckpointCode state_ = global::SocketGameProtocol1.CheckpointCode.CheckpointNone;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol1.CheckpointCode State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckpointData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckpointData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (State != global::SocketGameProtocol1.CheckpointCode.CheckpointNone) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (State != global::SocketGameProtocol1.CheckpointCode.CheckpointNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (State != global::SocketGameProtocol1.CheckpointCode.CheckpointNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckpointData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.State != global::SocketGameProtocol1.CheckpointCode.CheckpointNone) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            State = (global::SocketGameProtocol1.CheckpointCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
